@page "/RTicket";
@inject HttpClient httpClient

<PageTitle>Registro Tickets</PageTitle>

<EditForm Model="tickets" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow col-8">
        <div class="card-header bg-primary">
            <h1 class="text-light">Registro de Tickets</h1>
        </div>
        <div class="card-body bg-light">
            <div class="row">
                <div class="col col-4">
                    <label class="fw-bold bi bi-key"> Cliente:</label>
                    <InputSelect @bind-Value="tickets.ClienteId" class="form-select">
                        @foreach (var cliente in ListaClientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => tickets.ClienteId)" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-4">
                    <label class="fw-bold bi bi-calendar-date"> Fecha</label>
                    <InputDate @bind-Value="tickets.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => tickets.Fecha)" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-3">
                    <label class="fw-bold bi bi-person-badge-fill"> Solicitado Por:</label>
                    <InputText @bind-Value="tickets.Solicitadopor" class="form-control"></InputText>
                    <ValidationMessage For="@(() => tickets.Solicitadopor)" />
                </div>
                <div class="col-3">
                    <label class="fw-bold bi bi-pencil-square"> Asunto:</label>
                    <InputText @bind-Value="tickets.Asunto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => tickets.Asunto)" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-6">
                    <label class="fw-bold bi bi-card-text"> Descripci&oacute;n:</label>
                    <InputText @bind-Value="tickets.Descripcion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => tickets.Descripcion)" />
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header bg-primary">
                <h3 class="text-light">Detalle Ticket</h3>
            </div>
            <div class="card-body row">
                <div>
                    <label class="bi bi-person-fill fw-bold"> Nombre</label>
                    <InputText @bind-Value="Detalle.Emisor" class="form-control" placeholder="Enel R. Almonte."></InputText>
                    <ValidationMessage For="@(() => Detalle.Emisor)" />
                </div>
                <div>
                    <label class="bi bi-envelope-fill fw-bold"> Mensaje</label>
                    <InputTextArea @bind-Value="Detalle.Mensaje" class="form-control" placeholder="Agregue un mensaje."></InputTextArea>
                    <ValidationMessage For="@(() => Detalle.Mensaje)" />
                </div>
                <div class="mt-2">
                    <button type="button" @onclick="Agregar" class="btn btn-success bi bi-plus-square justify-content-end col-3"> Agregar</button>
                    <div class="col col-3">
                        @if (resultado == 3)
                        {
                            <p class="alert-danger form-control m-1">@mensaje</p>
                        }
                    </div>
                </div>
            </div>
            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        <th>Emisor</th>
                        <th>Mensaje</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in ListaDetalles)
                    {
                        <tr>
                            <td>@detalle.Emisor</td>
                            <td>@detalle.Mensaje</td>
                            <td><button type="button" class="btn btn-danger bi bi-trash-fill" @onclick=@(() => Remove(detalle))></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
            <div class="row">
                <div class="input-group">
                    <a href="/IndexTickets" class="btn btn-primary bi bi-house-door-fill">Volver</a>
                    <button type="button" class="btn btn-secondary bi bi-file-earmark-diff-fill" @onclick="Nuevo" @oninput="MensajeGuardar">Nuevo</button>
                    <button type="submit" class="btn btn-success bi bi-floppy-fill">Guardar</button>
                </div>
                <div class="col col-3">
                    @if (resultado == 1)
                    {
                        <p class="alert-success form-control m-1">@mensaje</p>
                    }
                    else if (resultado == 2)
                    {
                        <p class="alert-danger form-control m-1">@mensaje</p>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    public Tickets tickets = new Tickets();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<TicketsDetalle> ListaDetalles = new List<TicketsDetalle>();
    public TicketsDetalle Detalle { get; set; } = new TicketsDetalle();

    public string? mensaje { get; set; }
    public int resultado { get; set; }
    public int Opcion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!;
        tickets.Fecha = DateTime.Today;
        Nuevo();
    }


    public async Task Guardar()
    {
        var guardadoTicket = await httpClient.PostAsJsonAsync("api/Tickets", tickets);

        if (guardadoTicket.IsSuccessStatusCode)
        {
            var ticketCreado = await guardadoTicket.Content.ReadFromJsonAsync<Tickets>();

            foreach (var detalle in ListaDetalles)
            {
                TicketsDetalle ticketsDetalleNew = new TicketsDetalle();
                ticketsDetalleNew.TicketId = ticketCreado!.TicketId;
                ticketsDetalleNew.Emisor = detalle.Emisor;
                ticketsDetalleNew.Mensaje = detalle.Mensaje;

                await httpClient.PostAsJsonAsync("api/TicketsDetalle", ticketsDetalleNew);
            }
            resultado = 1;
            mensaje = "Registro Guardado";
            ListaDetalles = new List<TicketsDetalle>();
            tickets = new Tickets();
        }
        else
        {
            resultado = 2;
            mensaje = "Registro No Guardado";
        }
    }

    public void Agregar()
    {
        if (!string.IsNullOrEmpty(Detalle.Emisor) && !string.IsNullOrEmpty(Detalle.Mensaje))
        {
            if (ListaDetalles.Exists(p => p.Emisor == Detalle.Emisor))
            {
                resultado = 3;
                mensaje = "Existe ese Emisor";
            }
            else
            {
                resultado = 0;
                mensaje = "";
                ListaDetalles.Add(Detalle);
                Detalle = new TicketsDetalle();
            }
        }
        else
        {
            resultado = 3;
            mensaje = "LLena todos los campos";
        }
    }

    public void Remove(TicketsDetalle details)
    {
        Detalle = details;
        ListaDetalles.Remove(details);
    }

    public void MensajeGuardar()
    {
        resultado = 0;
        mensaje = string.Empty;
    }

    public void Nuevo()
    {
        tickets = new Tickets();
        ListaDetalles = new List<TicketsDetalle>();
        MensajeGuardar();
        tickets.Fecha = DateTime.Today;
    }
}
